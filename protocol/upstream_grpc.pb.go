// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: upstream.proto

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UpstreamClient is the client API for Upstream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UpstreamClient interface {
	// RegisterPIDs to the given client
	RegisterPIDs(ctx context.Context, in *PIDSet, opts ...grpc.CallOption) (*Reply, error)
	// Proxy a given sent of messages through this upstream
	Proxy(ctx context.Context, in *ProxyRequest, opts ...grpc.CallOption) (*ProxyReply, error)
	// Fetch the next batch of messages from this upstream
	Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*FetchReply, error)
}

type upstreamClient struct {
	cc grpc.ClientConnInterface
}

func NewUpstreamClient(cc grpc.ClientConnInterface) UpstreamClient {
	return &upstreamClient{cc}
}

func (c *upstreamClient) RegisterPIDs(ctx context.Context, in *PIDSet, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/proto.Upstream/RegisterPIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upstreamClient) Proxy(ctx context.Context, in *ProxyRequest, opts ...grpc.CallOption) (*ProxyReply, error) {
	out := new(ProxyReply)
	err := c.cc.Invoke(ctx, "/proto.Upstream/Proxy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upstreamClient) Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*FetchReply, error) {
	out := new(FetchReply)
	err := c.cc.Invoke(ctx, "/proto.Upstream/Fetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpstreamServer is the server API for Upstream service.
// All implementations must embed UnimplementedUpstreamServer
// for forward compatibility
type UpstreamServer interface {
	// RegisterPIDs to the given client
	RegisterPIDs(context.Context, *PIDSet) (*Reply, error)
	// Proxy a given sent of messages through this upstream
	Proxy(context.Context, *ProxyRequest) (*ProxyReply, error)
	// Fetch the next batch of messages from this upstream
	Fetch(context.Context, *FetchRequest) (*FetchReply, error)
	mustEmbedUnimplementedUpstreamServer()
}

// UnimplementedUpstreamServer must be embedded to have forward compatible implementations.
type UnimplementedUpstreamServer struct {
}

func (UnimplementedUpstreamServer) RegisterPIDs(context.Context, *PIDSet) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPIDs not implemented")
}
func (UnimplementedUpstreamServer) Proxy(context.Context, *ProxyRequest) (*ProxyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Proxy not implemented")
}
func (UnimplementedUpstreamServer) Fetch(context.Context, *FetchRequest) (*FetchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedUpstreamServer) mustEmbedUnimplementedUpstreamServer() {}

// UnsafeUpstreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UpstreamServer will
// result in compilation errors.
type UnsafeUpstreamServer interface {
	mustEmbedUnimplementedUpstreamServer()
}

func RegisterUpstreamServer(s grpc.ServiceRegistrar, srv UpstreamServer) {
	s.RegisterService(&Upstream_ServiceDesc, srv)
}

func _Upstream_RegisterPIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PIDSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpstreamServer).RegisterPIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Upstream/RegisterPIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpstreamServer).RegisterPIDs(ctx, req.(*PIDSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Upstream_Proxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpstreamServer).Proxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Upstream/Proxy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpstreamServer).Proxy(ctx, req.(*ProxyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Upstream_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpstreamServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Upstream/Fetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpstreamServer).Fetch(ctx, req.(*FetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Upstream_ServiceDesc is the grpc.ServiceDesc for Upstream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Upstream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Upstream",
	HandlerType: (*UpstreamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterPIDs",
			Handler:    _Upstream_RegisterPIDs_Handler,
		},
		{
			MethodName: "Proxy",
			Handler:    _Upstream_Proxy_Handler,
		},
		{
			MethodName: "Fetch",
			Handler:    _Upstream_Fetch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "upstream.proto",
}
